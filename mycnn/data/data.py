# -*- coding: utf-8 -*-

"""
基於 Keras API 來實現"自定義資料讀取器"
"""

import cv2
import numpy as np

from tensorflow.keras.preprocessing.image import ImageDataGenerator


def random_crop(img, random_crop_size):
    # Note: image_data_format is 'channel_last'
    assert img.shape[0] == 3
    height, width = img.shape[1], img.shape[2]
    dy, dx = random_crop_size
    x = np.random.randint(0, width - dx + 1)
    y = np.random.randint(0, height - dy + 1)
    return img[:, y:(y+dy), x:(x+dx)]


def crop_generator(batches, crop_length):
    """Take as input a Keras ImageGen (Iterator) and generate random
    crops from the image batches generated by the original iterator.
    """
    while True:
        batch_x, batch_y = next(batches)
        batch_crops = np.zeros((batch_x.shape[0], 3, crop_length, crop_length))
        for i in range(batch_x.shape[0]):
            batch_crops[i] = random_crop(batch_x[i], (crop_length, crop_length))
        yield (batch_crops, batch_y)


def random_crop2(img, mask, random_crop_size, lb_size):
    # Note: image_data_format is 'channel_last'
    assert img.shape[0] == 3
    height, width = img.shape[1], img.shape[2]
    dy, dx = random_crop_size
    x = np.random.randint(0, width - dx + 1)
    y = np.random.randint(0, height - dy + 1)
    return img[:, y:(y+dy), x:(x+dx)], cv2.resize(mask[0, y:(y+dy), x:(x+dx)], (lb_size,lb_size))


def crop_generator2(im_batches, lb_batches, crop_length, lb_size=16):
    """Take as input a Keras ImageGen (Iterator) and generate random
    crops from the image batches generated by the original iterator.
    """
    while True:
        batch_im, _ = next(im_batches)
        batch_lb, _ = next(lb_batches)
        batch_lb[batch_lb > 0] = 1      # TODO
        batch_im_crops = np.zeros((batch_im.shape[0], 3, crop_length, crop_length))
        batch_ib_crops = np.zeros((batch_lb.shape[0], 1, lb_size, lb_size))
        for i in range(batch_im.shape[0]):
            batch_im_crops[i], batch_ib_crops[i] =\
                random_crop2(batch_im[i], batch_lb[i], (crop_length, crop_length), lb_size=lb_size)
        yield (batch_im_crops, batch_ib_crops)
        
        
def traCropGenerator(path,
                     crop_im_size=142,
                     crop_lb_size=34,
                     batch_size=1,
                     target_size=(320, 320),
                     seed=1):
    """
    Generate image and mask at the same time.
    use the same seed for im_gen and lb_gen to 
        ensure the transformation for image and mask is the same.
    """
    
    im_gen = ImageDataGenerator(rescale=1./255)
    im_gen = im_gen.flow_from_directory(
        path,
        classes=["im"],
        target_size=target_size,
        batch_size=batch_size,
        seed=seed,
    )
    lb_gen = ImageDataGenerator(rescale=1./255)
    lb_gen = lb_gen.flow_from_directory(
        path,
        classes=["mask"],
        target_size=target_size,
        batch_size=batch_size,
        color_mode="grayscale",
        seed=seed,
    )
    nb_sample = im_gen.nb_sample
    return crop_generator2(im_gen, lb_gen, crop_im_size, crop_lb_size), nb_sample